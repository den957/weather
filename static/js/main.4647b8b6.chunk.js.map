{"version":3,"sources":["components/Weather/Weather.module.css","components/Common/Preloader.module.css","assets/images/weather/clouds.png","assets/images/weather/rain.png","assets/images/weather/sunCloud.png","assets/images/weather/sun.png","components/Weather/Weather.jsx","api/api.js","redux/weather.reducer.js","assets/images/logo.png","assets/images/city/lodz.jpg","assets/images/city/warsaw.jpg","assets/images/city/gdansk.jpg","assets/images/city/krakow.jpg","assets/images/city/poznan.jpg","assets/images/city/wroclaw.jpg","components/Common/Preloader.jsx","components/Weather/WeatherContainer.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["module","exports","Weather","weather","convert","all","clouds","className","s","weather__body","body__row","body__info","infoBody__image","src","sun","alt","sunCloud","rain","infoBody__degrees","degreesBody__row","degreesBody__max","main","temp_max","degreesBody__min","temp_min","body__detail","cn","detailBody__temperature","detailBody__item","temp","detailBody__feelsLike","feels_like","detailBody__pressure","Math","round","pressure","detailBody__humidity","humidity","wind","speed","weatherApi","dataCity","window","location","protocol","axios","get","getInfoWeatherSuccessType","initialState","getInfoWeatherTC","dispatch","then","response","data","statusText","type","weatherReducer","state","action","Preloader","props","loader","withUrlData","withRouter","useState","active","name","id","image","warsaw","link","lodz","wroclaw","krakow","gdansk","poznan","city","useEffect","match","params","newDate","Date","date","getMonth","getDate","cityArr","map","el","to","city__item","city__active","onClick","city__name","city__date","city__image","container","logo","title","weather__city","city__row","connect","App","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,UAAY,2BAA2B,KAAO,sBAAsB,MAAQ,uBAAuB,UAAY,2BAA2B,WAAa,4BAA4B,aAAe,8BAA8B,WAAa,4BAA4B,WAAa,4BAA4B,YAAc,6BAA6B,cAAgB,+BAA+B,UAAY,2BAA2B,gBAAkB,iCAAiC,kBAAoB,mCAAmC,iBAAmB,kCAAkC,iBAAmB,kCAAkC,iBAAmB,kCAAkC,aAAe,8BAA8B,iBAAmB,oC,mBCA3yBD,EAAOC,QAAU,CAAC,OAAS,0BAA0B,gBAAgB,mC,oMCDtD,MAA0B,mCCA1B,MAA0B,iCCA1B,MAA0B,qCCA1B,MAA0B,gC,OC+D1BC,EAvDC,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,QAAwC,IAA/BC,WAA+B,MAAzBF,EAAQG,OAAOD,IAAU,EACjE,OACG,mCACG,qBAAKE,UAAWC,IAAEC,cAAlB,SACG,sBAAKF,UAAWC,IAAEE,UAAlB,UACG,sBAAKH,UAAWC,IAAEG,WAAlB,UACG,sBAAKJ,UAAWC,IAAEI,gBAAlB,UACIP,GAAO,IACL,qBAAKQ,IAAKC,EAAKC,IAAK,KAEtBV,GAAO,IAAMA,EAAM,IACjB,qBAAKQ,IAAKG,EAAUD,IAAK,KAE3BV,GAAO,IAAMA,EAAM,IACjB,qBAAKQ,IAAKP,EAAQS,IAAK,KAEzBV,GAAO,KAAOA,EAAM,IAClB,qBAAKQ,IAAKI,EAAMF,IAAK,QAG3B,qBAAKR,UAAWC,IAAEU,kBAAlB,SACG,sBAAKX,UAAWC,IAAEW,iBAAlB,UACG,sBAAKZ,UAAWC,IAAEY,iBAAlB,gBAEG,gCAAMhB,EAAQD,EAAQkB,KAAKC,UAA3B,cAEH,sBAAKf,UAAWC,IAAEe,iBAAlB,gBAEG,gCAAMnB,EAAQD,EAAQkB,KAAKG,UAA3B,sBAKZ,sBAAKjB,UAAWC,IAAEiB,aAAlB,UACG,sBAAKlB,UAAWmB,IAAGlB,IAAEmB,wBAAyBnB,IAAEoB,kBAAhD,gCACmB,iCAAOxB,EAAQD,EAAQkB,KAAKQ,MAA5B,aAEnB,sBAAKtB,UAAWmB,IAAGlB,IAAEsB,sBAAuBtB,IAAEoB,kBAA9C,wBACc,iCAAOxB,EAAQD,EAAQkB,KAAKU,YAA5B,aAEd,sBAAKxB,UAAWmB,IAAGlB,IAAEwB,qBAAsBxB,IAAEoB,kBAA7C,0BACgB,+BAAOK,KAAKC,MAA8B,QAAxB/B,EAAQkB,KAAKc,eAE/C,sBAAK5B,UAAWmB,IAAGlB,IAAE4B,qBAAsB5B,IAAEoB,kBAA7C,yBACe,+BAAOzB,EAAQkB,KAAKgB,cAEnC,sBAAK9B,UAAWmB,IAAGlB,IAAE4B,qBAAsB5B,IAAEoB,kBAA7C,uBACa,+BAAOzB,EAAQmC,KAAKC,sB,yBCtDtCC,EAAa,SACXC,GACT,GAAiC,UAA7BC,OAAOC,SAASC,SAAsB,CAEvC,OAAOC,IAAMC,IAAN,UADG,0CACH,qBAA6BL,EAA7B,4CAGP,OAAOI,IAAMC,IAAN,UADG,2CACH,qBAA6BL,EAA7B,6CCNVM,EAA4B,gCAE5BC,EAAe,CAClB7C,QAAS,MAiBC8C,EAAmB,SAACR,GAC9B,OAAO,SAACS,GACLV,EAAuBC,GACnBU,MAAK,SAACC,GALqB,IAACC,EAME,OAAxBD,EAASE,YACVJ,GAPuBG,EAOQD,EAASC,KAPP,CAAEE,KAAMR,EAA2BM,eAYpEG,EAzBQ,WAAmC,IAAlCC,EAAiC,uDAAzBT,EAAcU,EAAW,uCACtD,OAAQA,EAAOH,MACZ,KAAKR,EACF,OAAO,2BACDU,GADN,IAEGtD,QAASuD,EAAOL,OAGtB,QACG,OAAOI,IChBD,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,oC,iBCmB1BE,EAhBG,SAACC,GAChB,OACG,mCACG,sBAAKrD,UAAWC,IAAEqD,OAAlB,UACG,wBAEA,wBAEA,wBAEA,8BC0FRC,EAAcC,aAvFc,SAACH,GAAW,IAAD,EAChBI,mBAAS,CAC9B,CAAEC,QAAQ,EAAOC,KAAM,SAAUC,GAAI,EAAGC,MAAOC,EAAQC,KAAM,UAC7D,CAAEL,QAAQ,EAAMC,KAAM,OAAQC,GAAI,EAAGC,MAAOG,EAAMD,KAAM,QACxD,CAAEL,QAAQ,EAAOC,KAAM,UAAWC,GAAI,EAAGC,MAAOI,EAASF,KAAM,WAC/D,CAAEL,QAAQ,EAAOC,KAAM,SAAUC,GAAI,EAAGC,MAAOK,EAAQH,KAAM,UAC7D,CAAEL,QAAQ,EAAOC,KAAM,SAAUC,GAAI,EAAGC,MAAOM,EAAQJ,KAAM,UAC7D,CAAEL,QAAQ,EAAOC,KAAM,SAAUC,GAAI,EAAGC,MAAOO,EAAQL,KAAM,YAPxB,mBACjCM,EADiC,UASxCC,qBAAU,WACPjB,EAAMX,iBAAiBW,EAAMkB,MAAMC,OAAOH,QAC1C,CAAChB,EAAMkB,MAAMC,OAAOH,OAEvB,IACMI,EAAU,IAAIC,KAChBC,EAAI,UAFO,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEzGF,EAAQG,YAArB,YAAoCH,EAAQI,UAAY,GAApB,WAA6BJ,EAAQI,WAAcJ,EAAQI,WAoBjGC,EAAUT,EAAKU,KAAI,SAACC,GACvB,OACG,eAAC,IAAD,CAASC,GAAE,UAAKD,EAAGjB,MAAoB/D,UAAWgF,EAAGtB,OAASvC,IAAGlB,IAAEiF,WAAYjF,IAAEkF,cAAgBlF,IAAEiF,WAAYE,QAAS,WAhBzG,IAACxB,EAgBkIoB,EAAGpB,GAPxJS,EAAKU,KAAI,SAACC,GACP,OAAOA,EAAGtB,QAAS,KAVHE,EAgByJoB,EAAGpB,GAf/KS,EAAKU,KAAI,SAACC,GACP,GAAIA,EAAGpB,KAAOA,EACX,OAAOoB,EAAGtB,QAAS,MAatB,UACG,qBAAK1D,UAAWC,IAAEoF,WAAlB,SACIL,EAAGrB,OAEP,qBAAK3D,UAAWC,IAAEqF,WAAlB,SACIX,IAEJ,qBAAK3E,UAAWC,IAAEsF,YAAlB,SACG,qBAAKjF,IAAK0E,EAAGnB,MAAOrD,IAAK,SARCwE,EAAGpB,OAazC,OACG,mCACG,qBAAK5D,UAAWC,IAAEa,KAAlB,SACG,sBAAKd,UAAWC,IAAEuF,UAAlB,UACG,qBAAKxF,UAAWC,IAAEwF,KAAlB,SACG,qBAAKnF,IAAKmF,EAAMjF,IAAK,OAExB,qBAAKR,UAAWC,IAAEyF,MAAlB,oCAGA,0BAAS1F,UAAWC,IAAEL,QAAtB,UACG,qBAAKI,UAAWC,IAAE0F,cAAlB,SACG,qBAAK3F,UAAWC,IAAE2F,UAAlB,SACId,MAGLzB,EAAMzD,QAEH,cAAC,EAAD,CAASA,QAASyD,EAAMzD,QAASC,QAnDrC,SAACyB,GACd,OAAOI,KAAKC,MAAML,EAAO,WAiDR,cAAC,EAAD,iBAqBRuE,eANS,SAAC3C,GACtB,MAAO,CACJtD,QAASsD,EAAMtD,QAAQA,YAPF,SAAC+C,GACzB,MAAO,CACJD,iBAAkB,SAACR,GAAeS,EAASD,EAAiBR,QASnD2D,CAA6CtC,GC3F7CuC,EARH,SAACzC,GACX,OACE,qCACE,cAAC,IAAD,CAAU4B,GAAG,UACb,cAAC,IAAD,CAAOc,KAAK,UAAUC,OAAQ,kBAAM,cAAC,EAAD,WCG3BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvD,MAAK,YAAkD,IAA/CwD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCFDO,EAAWC,YAAgB,CACrC9G,QAASqD,IAEN0D,EAAQC,YAAYH,EAAUI,YAAgBC,MACrCH,IACfxE,OAAOwE,MAAQA,ECDfI,IAASf,OACP,cAAC,IAAD,UACE,cAAC,IAAMgB,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,SAE1BjB,M","file":"static/js/main.4647b8b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Weather_main__2qmeR\",\"container\":\"Weather_container__1V056\",\"logo\":\"Weather_logo__g7_sS\",\"title\":\"Weather_title__15H3v\",\"city__row\":\"Weather_city__row__c-QnE\",\"city__item\":\"Weather_city__item__2Gq9H\",\"city__active\":\"Weather_city__active__W0XFd\",\"city__name\":\"Weather_city__name__2zhFy\",\"city__date\":\"Weather_city__date__2c6cF\",\"city__image\":\"Weather_city__image__hZ4ic\",\"weather__body\":\"Weather_weather__body__HFK1t\",\"body__row\":\"Weather_body__row__CTue-\",\"infoBody__image\":\"Weather_infoBody__image__1u9jz\",\"infoBody__degrees\":\"Weather_infoBody__degrees__momN5\",\"degreesBody__row\":\"Weather_degreesBody__row__2OtaR\",\"degreesBody__max\":\"Weather_degreesBody__max__3a2h8\",\"degreesBody__min\":\"Weather_degreesBody__min__W1We9\",\"body__detail\":\"Weather_body__detail__3VeMI\",\"detailBody__item\":\"Weather_detailBody__item__1epn2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__DuPuF\",\"loader-circle\":\"Preloader_loader-circle__dUaQr\"};","export default __webpack_public_path__ + \"static/media/clouds.14fa8952.png\";","export default __webpack_public_path__ + \"static/media/rain.7db1fa78.png\";","export default __webpack_public_path__ + \"static/media/sunCloud.32e665c9.png\";","export default __webpack_public_path__ + \"static/media/sun.8f819304.png\";","import React from 'react'\r\nimport s from './Weather.module.css'\r\nimport cn from 'classnames'\r\nimport clouds from '../../assets/images/weather/clouds.png'\r\nimport rain from '../../assets/images/weather/rain.png'\r\nimport sunCloud from '../../assets/images/weather/sunCloud.png'\r\nimport sun from '../../assets/images/weather/sun.png'\r\n\r\nconst Weather = ({ weather, convert, all = weather.clouds.all }) => {\r\n   return (\r\n      <>\r\n         <div className={s.weather__body}>\r\n            <div className={s.body__row}>\r\n               <div className={s.body__info}>\r\n                  <div className={s.infoBody__image}>\r\n                     {all <= 25 &&\r\n                        <img src={sun} alt={''} />\r\n                     }\r\n                     {all <= 50 && all > 25 &&\r\n                        <img src={sunCloud} alt={''} />\r\n                     }\r\n                     {all <= 90 && all > 50 &&\r\n                        <img src={clouds} alt={''} />\r\n                     }\r\n                     {all <= 100 && all > 90 &&\r\n                        <img src={rain} alt={''} />\r\n                     }\r\n                  </div>\r\n                  <div className={s.infoBody__degrees}>\r\n                     <div className={s.degreesBody__row}>\r\n                        <div className={s.degreesBody__max}>\r\n                           max\r\n                           <div>{convert(weather.main.temp_max)}°C</div>\r\n                        </div>\r\n                        <div className={s.degreesBody__min}>\r\n                           min\r\n                           <div>{convert(weather.main.temp_min)}°C</div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div className={s.body__detail}>\r\n                  <div className={cn(s.detailBody__temperature, s.detailBody__item)}>\r\n                     Temperature, °C <span>{convert(weather.main.temp)}°</span>\r\n                  </div>\r\n                  <div className={cn(s.detailBody__feelsLike, s.detailBody__item)}>\r\n                     feels like <span>{convert(weather.main.feels_like)}°</span>\r\n                  </div>\r\n                  <div className={cn(s.detailBody__pressure, s.detailBody__item)}>\r\n                     Pressure, mm <span>{Math.round(weather.main.pressure * 0.750064) /*1 mbar = 0.750064 mmH*/}</span>\r\n                  </div>\r\n                  <div className={cn(s.detailBody__humidity, s.detailBody__item)}>\r\n                     Humidity, % <span>{weather.main.humidity}</span>\r\n                  </div>\r\n                  <div className={cn(s.detailBody__humidity, s.detailBody__item)}>\r\n                     Wind, kmh <span>{weather.wind.speed}</span>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\nexport default Weather","import axios from 'axios'\r\nexport const weatherApi = {\r\n   weatherInfo(dataCity) {\r\n      if (window.location.protocol === 'http:') {\r\n         let url = 'http://api.openweathermap.org/data/2.5/'\r\n         return axios.get(`${url}weather?q=${dataCity}&appid=9f2486a52618766bf36ec0fa97d8385d`)\r\n      } else {\r\n         let url = 'https://api.openweathermap.org/data/2.5/'\r\n         return axios.get(`${url}weather?q=${dataCity}&appid=9f2486a52618766bf36ec0fa97d8385d`)\r\n      }\r\n   }\r\n}","import { weatherApi } from \"../api/api\"\r\n\r\nconst getInfoWeatherSuccessType = 'GET_INFO_WEATHER_SUCCESS_TYPE'\r\n\r\nconst initialState = {\r\n   weather: null\r\n}\r\nconst weatherReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case getInfoWeatherSuccessType: {\r\n         return {\r\n            ...state,\r\n            weather: action.data\r\n         }\r\n      }\r\n      default: {\r\n         return state\r\n      }\r\n   }\r\n}\r\nexport const getInfoWeatherSuccess = (data) => ({ type: getInfoWeatherSuccessType, data })\r\n\r\nexport const getInfoWeatherTC = (dataCity) => {\r\n   return (dispatch) => {\r\n      weatherApi.weatherInfo(dataCity)\r\n         .then((response) => {\r\n            if (response.statusText === 'OK') {\r\n               dispatch(getInfoWeatherSuccess(response.data))\r\n            }\r\n         })\r\n   }\r\n}\r\nexport default weatherReducer","export default __webpack_public_path__ + \"static/media/logo.bee070b5.png\";","export default __webpack_public_path__ + \"static/media/lodz.d814bfeb.jpg\";","export default __webpack_public_path__ + \"static/media/warsaw.7d84bb07.jpg\";","export default __webpack_public_path__ + \"static/media/gdansk.bb5f2a7e.jpg\";","export default __webpack_public_path__ + \"static/media/krakow.87b538d8.jpg\";","export default __webpack_public_path__ + \"static/media/poznan.dec4d5b4.jpg\";","export default __webpack_public_path__ + \"static/media/wroclaw.d931c062.jpg\";","import React from 'react'\r\nimport s from './Preloader.module.css'\r\n\r\nconst Preloader = (props) => {\r\n   return (\r\n      <>\r\n         <div className={s.loader}>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\nexport default Preloader","import React, { useEffect, useState } from 'react'\r\nimport s from './Weather.module.css'\r\nimport cn from 'classnames'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink, withRouter } from 'react-router-dom'\r\nimport Weather from './Weather'\r\nimport { getInfoWeatherTC } from '../../redux/weather.reducer'\r\nimport logo from '../../assets/images/logo.png'\r\nimport lodz from '../../assets/images/city/lodz.jpg'\r\nimport warsaw from '../../assets/images/city/warsaw.jpg'\r\nimport gdansk from '../../assets/images/city/gdansk.jpg'\r\nimport krakow from '../../assets/images/city/krakow.jpg'\r\nimport poznan from '../../assets/images/city/poznan.jpg'\r\nimport wroclaw from '../../assets/images/city/wroclaw.jpg'\r\nimport Preloader from '../Common/Preloader'\r\n\r\nexport const WeatherContainer = (props) => {\r\n   const [city, setCity] = useState([\r\n      { active: false, name: 'Warsaw', id: 1, image: warsaw, link: 'warsaw' },\r\n      { active: true, name: 'Lodz', id: 2, image: lodz, link: 'lodz' },\r\n      { active: false, name: 'Wroclaw', id: 3, image: wroclaw, link: 'wroclaw' },\r\n      { active: false, name: 'Krakow', id: 4, image: krakow, link: 'krakow' },\r\n      { active: false, name: 'Gdansk', id: 5, image: gdansk, link: 'gdansk' },\r\n      { active: false, name: 'Poznan', id: 6, image: poznan, link: 'poznan' }\r\n   ])\r\n   useEffect(() => {\r\n      props.getInfoWeatherTC(props.match.params.city)\r\n   }, [props.match.params.city])\r\n   //create date \r\n   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];;\r\n   const newDate = new Date();\r\n   let date = `${months[newDate.getMonth()]} ${newDate.getDate() < 10 ? `0${newDate.getDate()}` : newDate.getDate()}`\r\n   // convert Degrees kelvin to Degrees Celsius\r\n   const convert = (temp) => {\r\n      return Math.round(temp - 273.15)\r\n   }\r\n   //add active class\r\n   let addActiveClass = (id) => {\r\n      city.map((el) => {\r\n         if (el.id === id) {\r\n            return el.active = true\r\n         }\r\n      })\r\n   }\r\n   //remove active class\r\n   let removeActiveClass = (id) => {\r\n      city.map((el) => {\r\n         return el.active = false\r\n      })\r\n   }\r\n   //create arr of cities\r\n   const cityArr = city.map((el) => {\r\n      return (\r\n         <NavLink to={`${el.link}`} key={el.id} className={el.active ? cn(s.city__item, s.city__active) : s.city__item} onClick={() => { removeActiveClass(el.id); addActiveClass(el.id) }} >\r\n            <div className={s.city__name}>\r\n               {el.name}\r\n            </div>\r\n            <div className={s.city__date}>\r\n               {date}\r\n            </div>\r\n            <div className={s.city__image}>\r\n               <img src={el.image} alt={''} />\r\n            </div>\r\n         </NavLink >\r\n      )\r\n   })\r\n   return (\r\n      <>\r\n         <div className={s.main}>\r\n            <div className={s.container}>\r\n               <div className={s.logo}>\r\n                  <img src={logo} alt={''} />\r\n               </div>\r\n               <div className={s.title}>\r\n                  Weather of Poland city\r\n               </div>\r\n               <section className={s.weather}>\r\n                  <div className={s.weather__city}>\r\n                     <div className={s.city__row}>\r\n                        {cityArr}\r\n                     </div>\r\n                  </div>\r\n                  {!props.weather\r\n                     ? <Preloader />\r\n                     : <Weather weather={props.weather} convert={convert} />\r\n                  }\r\n               </section>\r\n            </div>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n      getInfoWeatherTC: (dataCity) => { dispatch(getInfoWeatherTC(dataCity)) }\r\n   }\r\n}\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n      weather: state.weather.weather\r\n   }\r\n}\r\nlet withUrlData = withRouter(WeatherContainer)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withUrlData)","import React from 'react'\nimport './App.css'\nimport { Redirect, Route } from 'react-router-dom'\nimport WeatherContainer from './components/Weather/WeatherContainer'\n\nconst App = (props) => {\n  return (\n    <>\n      <Redirect to='/lodz' />\n      <Route path='/:city?' render={() => <WeatherContainer />} />\n    </>\n  )\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport weatherReducer from './weather.reducer'\r\n\r\n\r\nexport const reducers = combineReducers({\r\n   weather: weatherReducer\r\n})\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nexport default store\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter >\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n)\nreportWebVitals();\n"],"sourceRoot":""}